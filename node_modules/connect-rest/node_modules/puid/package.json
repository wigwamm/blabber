{
  "name": "puid",
  "version": "0.4.5",
  "description": "Generate an unique ID for use in a distributed environment.",
  "keywords": [
    "oid",
    "uid",
    "uuid",
    "uniqueid",
    "primary key",
    "distributed environment"
  ],
  "author": {
    "name": "Sascha Droste",
    "email": "sascha.droste@gmail.com",
    "url": "https://plus.google.com/118215422942628160262/about"
  },
  "main": "index.js",
  "dependencies": {},
  "devDependencies": {
    "mocha": "~1.12.0",
    "should": "~1.2.2",
    "grunt-cafe-mocha": "~0.1.8",
    "grunt-release": "~0.5.1",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-watch": "~0.5.3",
    "grunt": "~0.4.1"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/pid/puid.git"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/pid/puid/master/LICENSE"
    }
  ],
  "readme": "[![Build Status](https://travis-ci.org/pid/puid.png)](https://travis-ci.org/pid/puid)\n[![NPM version](https://badge.fury.io/js/puid.png)](http://badge.fury.io/js/puid)\n\n# puid - primary unique id\n\nGenerate an unique ID depending on time, machine and process for use in a distributed environment.\n\n\n## puid - 24 characters uid\n\nEach unique ID has 4 sections and has 24 chars, which are:\n\n  i.e. he5fps6l2504cd1w3ag8ut8e // he5fps6l-2504cd-1w3a-g8ut8e\n \n  - timestamp:    'he5fps6l'  // (8) Timestamp in microseconds - safe until 2059\n  - machineId:    '2504cd'    // (6) First 6 chars from md5 of first external network interface or fallback to hostname\n  - processId:    '1w3a'      // (4) pid\n  - counter:      'g8ut8e'    // (6) High-resolution real time; nanoseconds\n\nAll values (except machineID) are converted to base36.\n\nWhy is the counter not really a counter? Because of collision, it's more likely that the same machine and process use (accidently!) two puid-objects (async) and generate an Id at the same microsecond with identical counter. That the same process will execute the counter function within the same nanosecond should be impossible (imo) - feedback is welcome.\n\n\n## puid - short puid - 12-14 characters uid\n\nEach unique ID has 2 sections and has 12 chars without nodeId or 14 chars with nodeId, which are:\n\n    i.e. with 14-chars: aeby6ob5sso4zd // aeby6ob5sso4-zd\n\n    - timestamp:    'aeby6ob5sso4'  // (12) Timestamp in seconds + hrtime counter\n    - nodeId:       'zd'            // (2) nodeId\n\nAfter the first puid release, I was testing for some shorter UIDs. In result, the short-puid was born ;-). Works only with node.js (depends on process.hrtime). The process.hrtime[1] gives you a counter (milliseconds+nanoseconds value from 1 to 1_000_000_000) not depending of the current timestamp; in result you can use short-puid (12 chars version) without any conflicts with multi-instances of puid in the same process or in different processes on the same host (tested with 20 parallel instances generating 4 billion puids). With multi nodes/hosts, you have to use the short-version with 14 chars which includes a nodeId.\n\n\n### Configure short-puid\n\nYou have options :-) You can pass the epoch to start counting the timestamp, per default we start at \"1999-08-02 03:00:00 pm\", and you can pass the nodeId. Take a look to the usage section for all possiblities.\n\n\n## Usecase\n\nGenerate unique keys for e.g. Redis.\n\n\n## Installation\n[![NPM version](https://badge.fury.io/js/puid.png)](http://badge.fury.io/js/puid)\n\n```bash\n$ npm install puid\n```\n\n\n## Running tests\n\n[![Build Status](https://travis-ci.org/pid/puid.png)](https://travis-ci.org/pid/puid)\n\n```bash\n$ npm test\n```\n\n\n## Usage\n\n```js\n\nvar Puid = require('puid');\nvar puid;\n\n// generate puid (long-version 24-chars) \n\npuid = new Puid();\nconsole.log(puid.generate());   // hgqy29gr11cm2504cdf8rg7q\n\n\n// generate puid (short-version 12-chars) without nodeId / **Shortcut**\n\npuid = new Puid(true);\nconsole.log(puid.generate());  // 3bqk9my968mc\n\n\n// generate puid (short-version 14-chars) random nodeId / **Shortcut**\n\npuid = new Puid(false);\nconsole.log(puid.generate());  // 3bqk9my9buecut\n\n\n// generate puid (short-version 14-chars) with nodeId string\n\npuid = new Puid('JS');\nconsole.log(puid.generate());   // 3bq1plt0vlycjs // 3bq1plt0vlyc->(js)\n\n\n// generate puid (short-version 12-chars) with empty nodeId string\n\npuid = new Puid('');\nconsole.log(puid.generate());   // 3bq1plt1iiw4\n\n\n// generate puid (short-version 14-chars) with nodeId in config object\n\npuid = new Puid({\n    nodeId: 'JS'\n});\nconsole.log(puid.generate());   // 3bq1plt1ljwgjs // 3bq1plt1ljwg->(js)\n\n\n// generate puid (short-version 14-chars) with epoch in config object and random nodeId\n\npuid = new Puid({\n    epoch: '1980-01-01'\n});\nconsole.log(puid.generate());   // 801eeqggvq0w54\n\n\n// generate puid (short-version 14-chars) with epoch and nodeId in config object\n\npuid = new Puid({\n    epoch: '1980-01-01',\n    nodeId: 'JS'\n});\nconsole.log(puid.generate());   // 801eeqggyo00js // 801eeqggyo00->(js)\n\n\n// generate puid (short-version 12-chars) with epoch and empty nodeId in config object\n\npuid = new Puid({\n    epoch: '2013-01-01',\n    nodeId: ''\n});\nconsole.log(puid.generate());   // 036pqlnkkjk0\n\n\n```\n\n\n## [Changelog](https://raw.github.com/pid/puid/master/Changelog)\n\n## License\n\n[MIT](https://raw.github.com/pid/puid/master/LICENSE)\n\nCopyright (c) 2013 Sascha Droste <sascha.droste@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/pid/puid/issues"
  },
  "_id": "puid@0.4.5",
  "dist": {
    "shasum": "8744dff2957577bdda4cefe0589c44c06a0f364b"
  },
  "_from": "puid@~0.4",
  "_resolved": "https://registry.npmjs.org/puid/-/puid-0.4.5.tgz"
}
